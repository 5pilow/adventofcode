let run = program => {
	var p = 0
	var INPUT = 5
	while (p < |program|) {
		var inst = '' + program[p]
		var n = inst.size()
		var opcode = int(inst.substring(n - min(n, 2), min(2, n)).number())
		if opcode == 99 break
		var i = 3
		var m1 = i <= n ? int(inst.substring(n - i, 1).number()) : 0
		i++;
		var m2 = i <= n ? int(inst.substring(n - i, 1).number()) : 0
		i++;
		var m3 = i <= n ? int(inst.substring(n - i, 1).number()) : 0
		var i1 = program[p + 1]
		var i2 = program[p + 2]
		var i3 = program[p + 3]
		var d = 0
		var v = program[0]
		if opcode == 1 {
			var p1 = m1 == 1 ? i1 : program[i1]
			var p2 = m2 == 1 ? i2 : program[i2]
			v = p1 + p2
			d = program[p + 3]
			p += 4
		} else if opcode == 2 {
			var p1 = m1 == 1 ? i1 : program[i1]
			var p2 = m2 == 1 ? i2 : program[i2]
			v = p1 * p2
			d = program[p + 3]
			p += 4
		} else if opcode == 3 {
			v = INPUT
			d = program[p + 1]
			p += 2
		} else if opcode == 4 {
			var p1 = m1 == 1 ? i1 : program[i1]
			p += 2
			print(p1)
		} else if opcode == 5 {
			var p1 = m1 == 1 ? i1 : program[i1]
			var p2 = m2 == 1 ? i2 : program[i2]
			p += (p1 != 0 ? (p2 - p) : 3)
		} else if opcode == 6 {
			var p1 = m1 == 1 ? i1 : program[i1]
			var p2 = m2 == 1 ? i2 : program[i2]
			p += (p1 == 0 ? (p2 - p) : 3)
		} else if opcode == 7 {
			var p1 = m1 == 1 ? i1 : program[i1]
			var p2 = m2 == 1 ? i2 : program[i2]
			d = i3
			v = p1 < p2 ? 1 : 0
			p += 4
		} else if opcode == 8 {
			var p1 = m1 == 1 ? i1 : program[i1]
			var p2 = m2 == 1 ? i2 : program[i2]
			d = i3
			v = p1 == p2 ? 1 : 0
			p += 4
		}
		program[d] = v
	}
	program[0]
}

run((data / ',').map(s => int(s.number())))
