let run = program => {
	var p = 0l
	var relative_base = 0l
	var noutput = 0
	var lastx = 0l
	var lasty = 0l
	var paddle = 0l
	var ball = 0l
	var score = 0l
	while (p < |program|) {
		var inst = '' + program[p]
		var n = inst.size()
		var opcode = int(inst.substring(n - min(n, 2), min(2, n)).number())
		if opcode == 99 break
		var i = 3
		var m1 = i <= n ? inst.substring(n - i, 1).number() : 0l
		i++;
		var m2 = i <= n ? inst.substring(n - i, 1).number() : 0l
		i++;
		var m3 = i <= n ? inst.substring(n - i, 1).number() : 0l
		var i1 = program[p + 1]
		var i2 = program[p + 2]
		var i3 = program[p + 3]
		var d = 0l
		var v = program[0]
		if opcode == 1 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			v = p1 + p2
			d = p3
			p += 4
			program[d] = v
		} else if opcode == 2 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			v = p1 * p2
			d = p3
			p += 4
			program[d] = v
		} else if opcode == 3 {
			var p1 = m1 == 2 ? relative_base + i1 : i1
			p += 2
			program[p1] = (paddle == ball ? 0l : (paddle < ball ? 1l : -1l))
		} else if opcode == 4 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			p += 2
			if (noutput % 3 == 0) {
				lastx = p1
			} else if (noutput % 3 == 1) {
				lasty = p1
			} else if (noutput % 3 == 2) {
				if ((lastx == -1l) && (lasty == 0l)) {
					score = p1
				} else if (p1 == 4) {
					ball = lastx
				} else if (p1 == 3) {
					paddle = lastx
				}
			}
			noutput++
		} else if opcode == 5 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			p += (p1 != 0 ? (p2 - p) : 3)
		} else if opcode == 6 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			p += (p1 == 0 ? (p2 - p) : 3)
		} else if opcode == 7 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			d = p3
			v = p1 < p2 ? 1l : 0l
			p += 4
			program[d] = v
		} else if opcode == 8 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			d = p3
			v = p1 == p2 ? 1l : 0l
			p += 4
			program[d] = v
		} else if opcode == 9 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			relative_base += p1
			p += 2
		}
	}
	score
}

let program = ((data + ',0' * 2000) / ',').map(s => s.number())
program[0] = 2l
run(program)
