var wires = data / '\n'
var wire1 = wires[0]
var wire2 = wires[1]

var lines = []
var x = 0
var y = 0
for move in (wire1 / ',') {
    var d = move[0]
    var v = int(move.substring(1, |move| - 1).number())
    var line = [[x, y]]
    if d == 'U' y += v
    else if d == 'R' x += v
    else if d == 'D' y -= v
    else if d == 'L' x -= v
    line.push([x, y])
    lines.push(line)
}

let intersect_sub = line1, line2 => {
	var x1 = min(line2[0][0], line2[1][0])
	var x2 = max(line2[0][0], line2[1][0])
	var y1 = min(line1[0][1], line1[1][1])
	var y2 = max(line1[0][1], line1[1][1])
    if (line1[0][0] > x1 and line1[0][0] < x2 and
    y2 > line2[0][1] and y1 < line2[0][1]) {
        return [line1[0][0], line2[0][1]]
    } else {
        return null
    }
}

let intersect = line1, line2 => {
    var r = intersect_sub(line1, line2)
    if r return r
    var r2 = intersect_sub(line2, line1)
    if r2 return r2
    return null
}

let distance = p1, p2 => {
    |p1[0] - p2[0]| + |p1[1] - p2[1]|
}

x = 0
y = 0
var min_s = 9999999
var steps2 = 0
for move in (wire2 / ',') {
    var d = move[0]
    var v = int(move.substring(1, |move| - 1).number())
    var line2 = [[x, y]]
    if d == 'U' y += v
    else if d == 'R' x += v
    else if d == 'D' y -= v
    else if d == 'L' x -= v
    line2.push([x, y])
    var steps1 = 0
    for line1 in lines {
        var p = intersect(line1, line2)
        if p {
            var t_steps1 = steps1 + distance(line1[0], p)
            var t_steps2 = steps2 + distance(line2[0], p)
            min_s = min(min_s, t_steps1 + t_steps2)
            print("min_s " + min_s)
        }
        steps1 += distance(line1[0], line1[1])
    }
    steps2 += v
}
min_s