let run = program, panels => {
	var p = 0l
    var relative_base = 0l
    var x = 50
    var y = 1
    var noutput = 0
    var direction = 0
	while (p < |program|) {
		var inst = '' + program[p]
		var n = inst.size()
		var opcode = int(inst.substring(n - min(n, 2), min(2, n)).number())
		if opcode == 99 break
		var i = 3
		var m1 = i <= n ? inst.substring(n - i, 1).number() : 0l
		i++;
		var m2 = i <= n ? inst.substring(n - i, 1).number() : 0l
		i++;
		var m3 = i <= n ? inst.substring(n - i, 1).number() : 0l
		var i1 = program[p + 1]
		var i2 = program[p + 2]
		var i3 = program[p + 3]
		var d = 0l
		var v = program[0]
		if opcode == 1 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			v = p1 + p2
			d = p3
			p += 4
			program[d] = v
		} else if opcode == 2 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			v = p1 * p2
			d = p3
			p += 4
			program[d] = v
		} else if opcode == 3 {
			var p1 = m1 == 2 ? relative_base + i1 : i1
			p += 2
			program[p1] = long(max(0, panels[y * 100 + x]))
		} else if opcode == 4 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
            p += 2
            if noutput++ % 2 == 0 {
                panels[y * 100 + x] = int(p1)
            } else {
                direction = ((p1 == 0) ? ((direction + 3) % 4) : ((direction + 1) % 4))
                if (direction % 2 == 1) x += ((direction == 1) ? 1 : -1)
                else if (direction % 2 == 0) y += ((direction == 0) ? -1 : 1)
            }
			// print(p1)
		} else if opcode == 5 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			p += (p1 != 0 ? (p2 - p) : 3)
		} else if opcode == 6 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			p += (p1 == 0 ? (p2 - p) : 3)
		} else if opcode == 7 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			d = p3
			v = p1 < p2 ? 1l : 0l
			p += 4
			program[d] = v
		} else if opcode == 8 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			var p2 = m2 == 1 ? i2 : program[m2 == 2 ? relative_base + i2 : i2]
			var p3 = m3 == 2 ? relative_base + i3 : i3
			d = p3
			v = p1 == p2 ? 1l : 0l
			p += 4
			program[d] = v
		} else if opcode == 9 {
			var p1 = m1 == 1 ? i1 : program[m1 == 2 ? relative_base + i1 : i1]
			relative_base += p1
			p += 2
		}
	}
}

let program = ((data + ',0' * 2000) / ',').map(s => s.number())
let panels = [1] * 100 * 8
run(program, panels)
for c in panels.chunk(100) {
    print(c.join())
}
// panels.filter(x => x >= 0).size()
